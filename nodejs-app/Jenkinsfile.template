#!groovy
library 'cd-accel'
def testPodYaml = libraryResource 'podtemplates/nodejs-app/test-pod.yml'

pipeline {
  agent none
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    //set 1 hour timeout, as the job should never take longer than 1 hour
    timeout(time: 1, unit: 'HOURS')
    //be default Declarative Pipelines do a `checkout scm` for every stage, this disables that
    skipDefaultCheckout() 
    preserveStashes()
  }
  triggers {
    eventTrigger simpleMatch('todo-api')
  }
  stages {
    stage('Test') {
      agent {
        kubernetes {
          label 'nodejs-test'
          yaml testPodYaml
        }
      }
      steps {
        checkout scm
        gitShortCommit()
        //shared library that tokenizes the Jenkin project full name resulting in:
        //IMAGE_REPO, IMAGE_NAME and IMAGE_TAG environment variables
        imageNameTag()
        echo "reading marker file as properties file"
        script {
          //define default values that may be overridden via the .foo-bar file
          def d = [name: env.IMAGE_NAME, tag: env.IMAGE_TAG, pushBranch: 'false']
          //use the Pipeline Utility Steps plugin readProperties step to read the .foo-bar properties 
          def props = readProperties defaults: d, file: '.nodejs-app'
          env.IMAGE_NAME = props['name']
          env.IMAGE_TAG = props['tag']
        }
        container('nodejs') {
          sh 'npm install express'
          sh 'node ./hello.js &'
        }
        stash name: 'app', includes: '*.js, public/**, views/*, Dockerfile'
      }
    }
    stage('Build and Push Image') {
      steps {
        dockerBuildPush(env.IMAGE_NAME, env.IMAGE_TAG) {
          unstash 'app'
        }
      }
    }
    stage('Deploy') {
      agent none
      steps {
        kubeDeploy(env.IMAGE_REPO, env.IMAGE_NAME, env.IMAGE_TAG)
      }
    }
  }
}
